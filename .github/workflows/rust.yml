name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - master

env:
  # Because matklad said so https://matklad.github.io/2021/09/04/fast-rust-builds.html
  CARGO_INCREMENTAL: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  actions: write # allow dependabot PRs to manipulate CI cache

jobs:
  ci:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - name: Dependencies
        run: sudo apt-get install -y age protobuf-compiler

      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"

      - uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v16
        with:
          name: "${{ secrets.CACHIX_AUTH_USERNAME }}"
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Compile
        run: nix develop --command bash -c "cargo test --all-targets --all-features --no-run --locked"

      - name: Test
        run: nix develop --command bash -c "make test"

      - name: Format & Lint
        run: nix develop --command bash -c "make tidy"

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: ci
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  docker:
    runs-on: ubuntu-latest
    needs: ci
    if: "!contains(github.event.head_commit.message, 'docker skip') && github.ref_name == 'master'"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Rust cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: poe-stash-indexer-docker
      - name: Build
        run: |
          docker pull maximumstock2/base:latest
          docker run -v $PWD:/volume -v ~/.cargo:/volume/.cargo -e CARGO_HOME="/volume/.cargo" --rm -t maximumstock2/base:latest bash -c "\
            cd /volume \
            && cargo build --release --all-features --bin indexer \
            && strip target/x86_64-unknown-linux-musl/release/indexer \
            "
      # Workaround for overriding existing cache
      - name: Clear Rust Docker CI step cache
        if: ${{ steps.restore-cache.outputs.cache-hit }}
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ steps.restore-cache.outputs.cache-primary-key }} --confirm
        continue-on-error: true
      - name: Save Rust Docker CI step cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set short git commit SHA
        id: vars
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$shortSha"
      - name: Build indexer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./crates/indexer/Dockerfile
          target: production
          push: true
          tags: |
            maximumstock2/indexer:latest
            maximumstock2/indexer:${{ steps.vars.outputs.short_sha }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - ci
  #     - docker
  #   if: "!contains(github.event.head_commit.message, 'deploy skip') && github.ref_name == 'master'"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v5
  #     - name: Deployment
  #       env:
  #         DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
  #         DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  #         DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  #         AGE_KEY: ${{ secrets.AGE_KEY }}
  #       run: |
  #         eval $(ssh-agent -s)
  #         ssh-add <(echo "$DEPLOY_PRIVATE_KEY")
  #         ssh -q -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
  #           export AGE_KEY="$AGE_KEY"
  #           export ENV="production"

  #           set -ex
  #           echo "Environment: $ENV"

  #           # Make sure we have the latest images
  #           docker pull maximumstock2/trade-api:latest
  #           docker pull maximumstock2/trade-ingest:latest
  #           docker pull maximumstock2/indexer:latest

  #           cd deployment && git pull
  #           make config
  #           docker-compose -f docker-compose.yaml -f docker-compose.production.yaml build --force-rm reverse-proxy rabbitmq
  #           make up-prod
  #           docker-compose -f docker-compose.yaml -f docker-compose.production.yaml logs --tail=1000 trade-api trade-store indexer
  #         EOF
